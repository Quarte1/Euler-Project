'''
Created on 2014. 4. 7.

Highly divisible triangular number
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

@author: Alice
'''
import multiprocessing
from math import sqrt

def worker(step, total_process_number, target, result_queue):
    base = 1
    name = multiprocessing.current_process().name
    
    while True:
        n = base + step
        nth = get_nth_triangle_number(n)
        if get_divisor_number(nth) > target:
            result_queue.put(nth)
            print name, " find solution :", nth
            return
        else:
            base += total_process_number 

def get_nth_triangle_number(n):
    return (n * (n + 1))/2
    
def get_divisor_number(n):
    divisor_counter = 0
    for i in xrange(1, int(sqrt(n + 1))):
            if n % i == 0:
                divisor_counter += 2
    return divisor_counter

if __name__ == '__main__':
    target = 500

    result_queue = multiprocessing.Queue()
    process_number = multiprocessing.cpu_count()
    
    workers = [multiprocessing.Process(target=worker,
                                       name=str(i),
                                       args=(i, process_number, target, result_queue))
               for i in xrange(process_number) ]
        
    for i in workers:
        i.start()
    for j in workers:
        j.join()
    
    num_workers = process_number
    while num_workers:
        print result_queue.get()
        num_workers -= 1